#!/usr/bin/env node
const program = require('commander')
const kue = require('kue')
const async = require('async')
const queue = kue.createQueue({
  redis: process.env.REDIS_URL
})

const log = (message) => {
  if (program.verbose) console.log('[kue-move]', message)
}

const logError = (message) => {
   console.error(`[kue-move] Error: ${message}`)
}

const stateRegex = /^(inactive|active|failed|complete)$/i
const toRegex = /^(inactive|active|failed|complete|remove)$/
const validateState = (val, regex, message) => {
  if (val == null) {
    logError(message)
    process.exit(1)
  }
  if (!val.match(regex)) {
    logError(`Invalid state \`${val}\``)
    process.exit(1)
  }
  return val
}

program
  .version('0.0.3')
  .option('-f, --from <fromState>', 'From state')
  .option('-t, --to <toState>', 'To State')
  .option('-j, --job [jobType]', 'Job Type Condition', null)
  .option('-a, --age [jobAge]', 'Job Age Condition', null)
  .option('-v, --verbose', '', false)

program.parse(process.argv)

const { from, to } = program
const jobType = program.job
const jobAge = program.age

validateState(from, stateRegex, '`from` argument is required')
validateState(to, toRegex, '`to` argument is required')

const performAction = (id, callback) => {
  kue.Job.get(id, (error, job) => {
    if (error) callback(error)
    if (jobType && job.type !== jobType) return callback()
    log(`sending ${job.data.title} id=${job.id} to \`${to}\``)
    job[to](callback)
  })
}

queue[from]((error, ids) => {
  async.each(ids, performAction, (error) => {
    if (error) {
      logError(error)
      process.exit(1)
    }
    process.exit()
  })
})
